from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from typing import List, Dict, Any

from config import ai_service, MESSAGES, MOVIES_PER_PAGE
from states.search_states import SimpleSearchStates, AdvancedSearchStates, MovieSelectionState
from services.tmdb_api import TMDBApi
from services.ai_service import AIRecommendationService
from utils.formatters import (
    format_movies_page, format_genre_selection, format_search_params,
    format_error_message, format_movie_details
)
from keyboards.inline import (
    get_skip_button, get_genres_keyboard,
    get_yes_no_keyboard, get_sort_options_keyboard, get_main_menu,
    get_movie_selection_keyboard, get_pagination_with_movie_choice_keyboard
)

router = Router()
tmdb_api = TMDBApi()


# ===== –ü–†–û–°–¢–û–ô –ü–û–ò–°–ö =====

@router.callback_query(F.data == "simple_search")
async def simple_search_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    await state.set_state(SimpleSearchStates.waiting_for_title)
    await state.update_data(search_type="simple", title=None, genres=[], year=None)
    
    await callback.message.edit_text(
        MESSAGES['simple_search_start'],
        reply_markup=get_skip_button(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.message(SimpleSearchStates.waiting_for_title)
async def simple_search_title(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∏–ª—å–º–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º –ø–æ–∏—Å–∫–µ."""
    await state.update_data(title=message.text.strip())
    await ask_for_genres(message, state, is_simple=True)


@router.callback_query(F.data == "skip", SimpleSearchStates.waiting_for_title)
async def simple_search_skip_title(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ –ø—Ä–æ—Å—Ç–æ–º –ø–æ–∏—Å–∫–µ."""
    await ask_for_genres(callback.message, state, is_simple=True, edit=True)
    await callback.answer()


async def ask_for_genres(message, state: FSMContext, is_simple: bool = True, edit: bool = False):
    """–ó–∞–ø—Ä–æ—Å –∂–∞–Ω—Ä–æ–≤."""
    try:
        genres_map = await tmdb_api.get_genres()
        await state.update_data(genres_map=genres_map)
        
        next_state = SimpleSearchStates.waiting_for_genre if is_simple else AdvancedSearchStates.waiting_for_genres
        await state.set_state(next_state)
        
        text = "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞):"
        keyboard = get_genres_keyboard(genres_map)
        
        if edit:
            await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        await message.answer(format_error_message("api"), parse_mode="HTML")


@router.callback_query(F.data.startswith("genre_"))
async def toggle_genre(callback: CallbackQuery, state: FSMContext):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∂–∞–Ω—Ä–∞."""
    genre_id = int(callback.data.split("_")[1])
    data = await state.get_data()
    selected_genres = data.get("selected_genres", [])
    genres_map = data.get("genres_map", {})
    
    if genre_id in selected_genres:
        selected_genres.remove(genre_id)
    else:
        selected_genres.append(genre_id)
    
    await state.update_data(selected_genres=selected_genres)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = get_genres_keyboard(genres_map, selected_genres)
    
    try:
        await callback.message.edit_reply_markup(reply_markup=keyboard)
    except:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
    
    await callback.answer()


@router.callback_query(F.data == "clear_genres")
async def clear_genres(callback: CallbackQuery, state: FSMContext):
    """–û—á–∏—Å—Ç–∫–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤."""
    data = await state.get_data()
    genres_map = data.get("genres_map", {})
    
    await state.update_data(selected_genres=[])
    keyboard = get_genres_keyboard(genres_map, [])
    
    await callback.message.edit_reply_markup(reply_markup=keyboard)
    await callback.answer("–ñ–∞–Ω—Ä—ã –æ—á–∏—â–µ–Ω—ã")


@router.callback_query(F.data == "genres_done")
async def genres_done(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤."""
    data = await state.get_data()
    selected_genres = data.get("selected_genres", [])
    search_type = data.get("search_type", "simple")
    
    if search_type == "simple" and not selected_genres:
        await callback.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∂–∞–Ω—Ä –¥–ª—è –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞!", show_alert=True)
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è –∂–∞–Ω—Ä–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    genres_map = data.get("genres_map", {})
    genre_names = []
    for name, genre_id in genres_map.items():
        if genre_id in selected_genres:
            genre_names.append(name.title())
    
    await state.update_data(genres=genre_names, genre_ids=selected_genres)
    
    if search_type == "simple":
        await ask_for_year(callback.message, state, is_simple=True)
    else:
        await ask_for_year(callback.message, state, is_simple=False)
    
    await callback.answer()


async def ask_for_year(message, state: FSMContext, is_simple: bool = True):
    """–ó–∞–ø—Ä–æ—Å –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞."""
    next_state = SimpleSearchStates.waiting_for_year if is_simple else AdvancedSearchStates.waiting_for_year
    await state.set_state(next_state)
    
    text = "üìÖ –í–≤–µ–¥–∏—Ç–µ –≥–æ–¥ –≤—ã–ø—É—Å–∫–∞ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 2023):"
    await message.edit_text(text, reply_markup=get_skip_button(), parse_mode="HTML")


@router.message(SimpleSearchStates.waiting_for_year)
async def simple_search_year(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º –ø–æ–∏—Å–∫–µ."""
    year_text = message.text.strip()
    year = None
    
    if year_text.isdigit() and 1900 <= int(year_text) <= 2030:
        year = int(year_text)
    elif year_text:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (1900-2030) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    await state.update_data(year=year)
    await execute_simple_search(message, state)


@router.callback_query(F.data == "skip", SimpleSearchStates.waiting_for_year)
async def simple_search_skip_year(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≥–æ–¥–∞ –≤ –ø—Ä–æ—Å—Ç–æ–º –ø–æ–∏—Å–∫–µ."""
    await execute_simple_search(callback.message, state, edit=True)
    await callback.answer()


async def execute_simple_search(message, state: FSMContext, edit: bool = False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    loading_msg = await message.answer(MESSAGES['loading']) if not edit else None
    if edit:
        try:
            await message.edit_text(MESSAGES['loading'])
        except:
            loading_msg = await message.answer(MESSAGES['loading'])
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        movies = await tmdb_api.search_movies(
            title=data.get("title"),
            genre_ids=data.get("genre_ids"),
            year=data.get("year")
        )
        
        if not movies:
            error_text = MESSAGES['no_movies_found']
            keyboard = get_main_menu()
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await state.update_data(movies=movies, current_page=1)
            total_pages = (len(movies) + MOVIES_PER_PAGE - 1) // MOVIES_PER_PAGE
            
            error_text = format_movies_page(movies, 1, MOVIES_PER_PAGE)
            error_text += "\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞
            keyboard = get_pagination_with_movie_choice_keyboard(1, total_pages, "search_page")
        
        if loading_msg:
            await loading_msg.delete()
        
        if edit:
            await message.edit_text(error_text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(error_text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        if loading_msg:
            await loading_msg.delete()
        
        error_text = format_error_message("api")
        keyboard = get_main_menu()
        
        if edit:
            await message.edit_text(error_text, reply_markup=keyboard, parse_mode="HTML")
        else:
            await message.answer(error_text, reply_markup=keyboard, parse_mode="HTML")



# ===== –†–ê–°–®–ò–†–ï–ù–ù–´–ô –ü–û–ò–°–ö =====

@router.callback_query(F.data == "advanced_search")
async def advanced_search_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    await state.set_state(AdvancedSearchStates.waiting_for_title)
    await state.update_data(
        search_type="advanced", title=None, genres=[], year=None,
        min_rating=None, language=None, region=None, include_adult=False, sort_by="popularity.desc"
    )
    
    await callback.message.edit_text(
        "üéØ <b>–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫</b>\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:",
        reply_markup=get_skip_button(),
        parse_mode="HTML"
    )
    await callback.answer()


# ===== –ü–ê–ì–ò–ù–ê–¶–ò–Ø =====

@router.callback_query(F.data.startswith("search_page_"))
async def search_pagination(callback: CallbackQuery, state: FSMContext):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
    page = int(callback.data.split("_")[2])
    data = await state.get_data()
    movies = data.get("movies", [])
    
    if not movies:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    total_pages = (len(movies) + MOVIES_PER_PAGE - 1) // MOVIES_PER_PAGE
    
    if 1 <= page <= total_pages:
        await state.update_data(current_page=page)
        
        text = format_movies_page(movies, page, MOVIES_PER_PAGE)
        text += "\n\nüí° –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏–π—Å—è —Ñ–∏–ª—å–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π!"  # –î–û–ë–ê–í–ò–¢–¨
        
        # –ó–ê–ú–ï–ù–ò–¢–¨ –ù–ê –ù–û–í–£–Æ –§–£–ù–ö–¶–ò–Æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = get_pagination_with_movie_choice_keyboard(page, total_pages, "search_page")
        
        await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    
    await callback.answer()


@router.callback_query(F.data == "new_search")
async def new_search(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ–∏—Å–∫."""
    await state.clear()
    await callback.message.edit_text(
        MESSAGES['start'],
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()


@router.callback_query(F.data.startswith("details_"))
async def show_movie_details(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ."""
    movie_id = int(callback.data.split("_")[1])
    
    try:
        movie_details = await tmdb_api.get_movie_details(movie_id)
        if movie_details:
            details_text = format_movie_details(movie_details)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞
            back_keyboard = [[{"text": "üîô –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", "callback_data": "back_to_results"}]]
            
            await callback.message.edit_text(
                details_text, 
                reply_markup={"inline_keyboard": back_keyboard}, 
                parse_mode="HTML"
            )
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ", show_alert=True)
    except Exception as e:
        print(f"[ERROR] Failed to load movie details: {e}")
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", show_alert=True)


@router.callback_query(F.data == "back_to_results")
async def back_to_results(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–æ–∏—Å–∫–∞."""
    data = await state.get_data()
    movies = data.get("movies", [])
    current_page = data.get("current_page", 1)
    
    if not movies:
        await callback.message.edit_text(
            MESSAGES['start'],
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
        return
    
    total_pages = (len(movies) + MOVIES_PER_PAGE - 1) // MOVIES_PER_PAGE
    text = format_movies_page(movies, current_page, MOVIES_PER_PAGE)
    keyboard = get_pagination_with_movie_choice_keyboard(current_page, total_pages, "search_page")
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    await callback.answer()


@router.callback_query(F.data == "ai_recommendations")
async def show_ai_recommendations(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å AI —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."""
    user_id = callback.from_user.id
    
    try:
        genres_map = await tmdb_api.get_genres()
        recommendations = await ai_service.get_ai_recommendations(user_id, genres_map)
        
        text = MESSAGES['ai_recommendations'].format(recommendations=recommendations)
        await callback.message.edit_text(
            text,
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    except Exception as e:
        print(f"[ERROR] AI recommendations failed: {e}")
        await callback.message.edit_text(
            "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    
    await callback.answer()

@router.callback_query(F.data == "ask_movie_choice")
async def ask_movie_choice(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–æ—Å –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    await state.set_state(MovieSelectionState.waiting_for_movie_choice)
    
    await callback.message.edit_text(
        MESSAGES['ask_movie_choice'],
        reply_markup=get_movie_selection_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

@router.message(MovieSelectionState.waiting_for_movie_choice)
async def process_movie_choice(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º."""
    user_id = message.from_user.id
    choice = message.text.strip()
    
    try:
        data = await state.get_data()
        movies = data.get("movies", [])
        selected_genres = data.get("genre_ids", [])
        
        # –ò—â–µ–º —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ ID
        selected_movie = None
        
        if choice.isdigit():
            # –ü–æ–∏—Å–∫ –ø–æ ID –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            movie_id = int(choice)
            selected_movie = next((m for m in movies if m.get("id") == movie_id), None)
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ø–∏—Å–∫–µ, –ø–æ–ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –∏–∑ API
            if not selected_movie:
                selected_movie = await tmdb_api.get_movie_details(movie_id)
        else:
            # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
            choice_lower = choice.lower()
            selected_movie = next(
                (m for m in movies if choice_lower in m.get("title", "").lower() or 
                 choice_lower in m.get("original_title", "").lower()), 
                None
            )
        
        if selected_movie:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            ai_service.save_user_preference(user_id, selected_genres, selected_movie)
            
            await message.answer(
                MESSAGES['movie_saved'],
                reply_markup=get_main_menu(),
                parse_mode="HTML"
            )
        else:
            await message.answer(
                "‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ —Ç–æ—á–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞.",
                reply_markup=get_movie_selection_keyboard(),
                parse_mode="HTML"
            )
            return
    
    except Exception as e:
        print(f"[ERROR] Movie choice processing failed: {e}")
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=get_main_menu(),
            parse_mode="HTML"
        )
    
    await state.clear()

@router.callback_query(F.data == "skip_movie_choice")
async def skip_movie_choice(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≤—ã–±–æ—Ä–∞ —Ñ–∏–ª—å–º–∞."""
    await state.clear()
    await callback.message.edit_text(
        MESSAGES['start'],
        reply_markup=get_main_menu(),
        parse_mode="HTML"
    )
    await callback.answer()