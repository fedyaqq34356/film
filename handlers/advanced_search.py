from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext

from states.search_states import AdvancedSearchStates
from keyboards.inline import (
    get_skip_button, get_yes_no_keyboard, get_sort_options_keyboard,
    get_pagination_keyboard, get_main_menu
)
from services.tmdb_api import TMDBApi
from services.movie_service import MovieService
from utils.formatters import (
    format_movies_page, format_error_message, format_search_params
)
from config import MESSAGES, MOVIES_PER_PAGE

router = Router()
tmdb_api = TMDBApi()
movie_service = MovieService()


@router.message(AdvancedSearchStates.waiting_for_title)
async def advanced_search_title(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    await state.update_data(title=message.text.strip())
    await ask_for_rating(message, state)


@router.callback_query(F.data == "skip", AdvancedSearchStates.waiting_for_title)
async def advanced_search_skip_title(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –Ω–∞–∑–≤–∞–Ω–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ."""
    await ask_for_rating(callback.message, state, edit=True)
    await callback.answer()


async def ask_for_rating(message, state: FSMContext, edit: bool = False):
    """–ó–∞–ø—Ä–æ—Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    await state.set_state(AdvancedSearchStates.waiting_for_rating)
    
    text = "‚≠ê –í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (0-10, –Ω–∞–ø—Ä–∏–º–µ—Ä: 7.5):"
    
    if edit:
        await message.edit_text(text, reply_markup=get_skip_button(), parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=get_skip_button(), parse_mode="HTML")


@router.message(AdvancedSearchStates.waiting_for_rating)
async def advanced_search_rating(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    rating = movie_service.validate_rating(message.text.strip())
    
    if message.text.strip() and rating is None:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 10 (–Ω–∞–ø—Ä–∏–º–µ—Ä: 7.5) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    await state.update_data(min_rating=rating)
    await ask_for_language(message, state)


@router.callback_query(F.data == "skip", AdvancedSearchStates.waiting_for_rating)
async def advanced_search_skip_rating(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    await ask_for_language(callback.message, state, edit=True)
    await callback.answer()


async def ask_for_language(message, state: FSMContext, edit: bool = False):
    """–ó–∞–ø—Ä–æ—Å —è–∑—ã–∫–∞ —Ñ–∏–ª—å–º–∞."""
    await state.set_state(AdvancedSearchStates.waiting_for_language)
    
    text = ("üåê –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —è–∑—ã–∫–∞ —Ñ–∏–ª—å–º–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: en-US, ru-RU, fr-FR):\n\n"
           "<i>ru-RU</i> - —Ä—É—Å—Å–∫–∏–π\n"
           "<i>en-US</i> - –∞–Ω–≥–ª–∏–π—Å–∫–∏–π\n" 
           "<i>fr-FR</i> - —Ñ—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π\n"
           "<i>de-DE</i> - –Ω–µ–º–µ—Ü–∫–∏–π\n"
           "<i>es-ES</i> - –∏—Å–ø–∞–Ω—Å–∫–∏–π")
    
    if edit:
        await message.edit_text(text, reply_markup=get_skip_button(), parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=get_skip_button(), parse_mode="HTML")


@router.message(AdvancedSearchStates.waiting_for_language)
async def advanced_search_language(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —è–∑—ã–∫–∞."""
    language = message.text.strip()
    
    # –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —è–∑—ã–∫–æ–≤–æ–≥–æ –∫–æ–¥–∞
    if language and (len(language) < 2 or len(language) > 5):
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∫–æ–¥ —è–∑—ã–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: ru-RU, en-US) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    await state.update_data(language=language if language else "ru-RU")
    await ask_for_region(message, state)


@router.callback_query(F.data == "skip", AdvancedSearchStates.waiting_for_language)
async def advanced_search_skip_language(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —è–∑—ã–∫–∞."""
    await state.update_data(language="ru-RU")
    await ask_for_region(callback.message, state, edit=True)
    await callback.answer()


async def ask_for_region(message, state: FSMContext, edit: bool = False):
    """–ó–∞–ø—Ä–æ—Å —Ä–µ–≥–∏–æ–Ω–∞."""
    await state.set_state(AdvancedSearchStates.waiting_for_region)
    
    text = ("üåç –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞/—Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: US, RU, GB):\n\n"
           "<i>RU</i> - –†–æ—Å—Å–∏—è\n"
           "<i>US</i> - –°–®–ê\n"
           "<i>GB</i> - –í–µ–ª–∏–∫–æ–±—Ä–∏—Ç–∞–Ω–∏—è\n"
           "<i>FR</i> - –§—Ä–∞–Ω—Ü–∏—è\n"
           "<i>DE</i> - –ì–µ—Ä–º–∞–Ω–∏—è")
    
    if edit:
        await message.edit_text(text, reply_markup=get_skip_button(), parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=get_skip_button(), parse_mode="HTML")


@router.message(AdvancedSearchStates.waiting_for_region)
async def advanced_search_region(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞."""
    region = message.text.strip().upper()
    
    if region and len(region) != 2:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–≤—É—Ö–±—É–∫–≤–µ–Ω–Ω—ã–π –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: US, RU) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    await state.update_data(region=region if region else None)
    await ask_for_adult_content(message, state)


@router.callback_query(F.data == "skip", AdvancedSearchStates.waiting_for_region)
async def advanced_search_skip_region(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ —Ä–µ–≥–∏–æ–Ω–∞."""
    await ask_for_adult_content(callback.message, state, edit=True)
    await callback.answer()


async def ask_for_adult_content(message, state: FSMContext, edit: bool = False):
    """–ó–∞–ø—Ä–æ—Å –≤–∫–ª—é—á–µ–Ω–∏—è adult-–∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    await state.set_state(AdvancedSearchStates.waiting_for_adult_content)
    
    text = "üîû –í–∫–ª—é—á–∞—Ç—å —Ñ–∏–ª—å–º—ã –¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞?"
    keyboard = get_yes_no_keyboard("adult_yes", "adult_no")
    
    if edit:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.in_(["adult_yes", "adult_no"]))
async def advanced_search_adult_content(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ adult-–∫–æ–Ω—Ç–µ–Ω—Ç–∞."""
    include_adult = callback.data == "adult_yes"
    await state.update_data(include_adult=include_adult)
    
    await ask_for_sort(callback.message, state, edit=True)
    await callback.answer()


async def ask_for_sort(message, state: FSMContext, edit: bool = False):
    """–ó–∞–ø—Ä–æ—Å —Ç–∏–ø–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    await state.set_state(AdvancedSearchStates.waiting_for_sort)
    
    text = "üìä –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:"
    keyboard = get_sort_options_keyboard()
    
    if edit:
        await message.edit_text(text, reply_markup=keyboard, parse_mode="HTML")
    else:
        await message.answer(text, reply_markup=keyboard, parse_mode="HTML")


@router.callback_query(F.data.startswith("sort_"))
async def advanced_search_sort(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    if callback.data == "sort_done":
        await execute_advanced_search(callback.message, state, edit=True)
    else:
        sort_by = callback.data[5:]  # —É–±–∏—Ä–∞–µ–º –ø—Ä–µ—Ñ–∏–∫—Å "sort_"
        await state.update_data(sort_by=sort_by)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        sort_names = {
            "popularity.desc": "–ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏",
            "vote_average.desc": "–ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", 
            "primary_release_date.desc": "–ü–æ –¥–∞—Ç–µ –≤—ã—Ö–æ–¥–∞",
            "original_title.asc": "–ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é"
        }
        
        sort_name = sort_names.get(sort_by, sort_by)
        await callback.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: {sort_name}")
    
    await callback.answer()


async def execute_advanced_search(message, state: FSMContext, edit: bool = False):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
    data = await state.get_data()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
    search_params = format_search_params({
        'title': data.get('title'),
        'genres': data.get('genres', []),
        'year': data.get('year'),
        'min_rating': data.get('min_rating'),
        'language': data.get('language'),
        'region': data.get('region')
    })
    
    loading_text = search_params + MESSAGES['loading']
    
    if edit:
        await message.edit_text(loading_text, parse_mode="HTML")
    else:
        await message.answer(loading_text, parse_mode="HTML")
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        search_filters = {
            'title': data.get('title'),
            'genre_ids': data.get('genre_ids', []),
            'year': data.get('year'),
            'min_rating': data.get('min_rating'),
            'language': data.get('language', 'ru-RU'),
            'region': data.get('region'),
            'include_adult': data.get('include_adult', False),
            'sort_by': data.get('sort_by', 'popularity.desc')
        }
        
        movies = await movie_service.search_movies_with_filters(search_filters)
        
        if not movies:
            result_text = MESSAGES['no_movies_found']
            keyboard = get_main_menu()
        else:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            await state.update_data(movies=movies, current_page=1)
            total_pages = (len(movies) + MOVIES_PER_PAGE - 1) // MOVIES_PER_PAGE
            
            result_text = format_movies_page(movies, 1, MOVIES_PER_PAGE)
            keyboard = get_pagination_keyboard(1, total_pages, "search_page")
        
        await message.edit_text(result_text, reply_markup=keyboard, parse_mode="HTML")
            
    except Exception as e:
        print(f"[ERROR] Advanced search failed: {e}")
        error_text = format_error_message("api")
        keyboard = get_main_menu()
        
        await message.edit_text(error_text, reply_markup=keyboard, parse_mode="HTML")


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–¥–∞ –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤)
@router.message(AdvancedSearchStates.waiting_for_year)
async def advanced_search_year(message: Message, state: FSMContext):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–¥–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ."""
    year = movie_service.validate_year(message.text.strip())
    
    if message.text.strip() and year is None:
        await message.answer("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≥–æ–¥ (1900-2030) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    await state.update_data(year=year)
    await ask_for_rating(message, state)


@router.callback_query(F.data == "skip", AdvancedSearchStates.waiting_for_year)
async def advanced_search_skip_year(callback: CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–ø—É—Å–∫ –≥–æ–¥–∞ –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–º –ø–æ–∏—Å–∫–µ."""
    await ask_for_rating(callback.message, state, edit=True)
    await callback.answer()