from typing import List, Dict, Any, Optional
import html


def format_movie_short(movie: Dict[str, Any], index: int) -> str:
    """–ö—Ä–∞—Ç–∫–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞ –¥–ª—è —Å–ø–∏—Å–∫–∞."""
    title = html.escape(movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
    original_title = movie.get("original_title", "")
    release_date = movie.get("release_date", "")
    rating = movie.get("vote_average", 0)
    vote_count = movie.get("vote_count", 0)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
    year = ""
    if release_date:
        try:
            year = f" ({release_date[:4]})"
        except:
            pass
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—Å–ª–∏ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è
    orig_title_text = ""
    if original_title and original_title != movie.get("title", ""):
        orig_title_text = f"\n<i>{html.escape(original_title)}</i>"
    
    # –†–µ–π—Ç–∏–Ω–≥ —Å —ç–º–æ–¥–∑–∏
    rating_emoji = "‚≠ê" if rating >= 7.0 else "üåü" if rating >= 5.0 else "‚ö™"
    rating_text = f"{rating_emoji} <b>{rating:.1f}</b>"
    if vote_count > 0:
        rating_text += f" ({vote_count:,} –æ—Ü–µ–Ω–æ–∫)"
    
    return f"<b>{index}.</b> <b>{title}</b>{year}{orig_title_text}\n{rating_text}"


def format_movies_page(movies: List[Dict[str, Any]], page: int, per_page: int) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å —Ñ–∏–ª—å–º–∞–º–∏."""
    if not movies:
        return "üòî –§–∏–ª—å–º—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    
    start_idx = (page - 1) * per_page
    end_idx = min(start_idx + per_page, len(movies))
    page_movies = movies[start_idx:end_idx]
    
    header = f"üé¨ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞</b>\n"
    header += f"üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞ {page} ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ: {len(movies)}\n"
    header += "‚îÄ" * 30 + "\n\n"
    
    movies_text = []
    for i, movie in enumerate(page_movies, start=start_idx + 1):
        movies_text.append(format_movie_short(movie, i))
    
    return header + "\n\n".join(movies_text)


def format_movie_details(movie: Dict[str, Any]) -> str:
    """–ü–æ–¥—Ä–æ–±–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ."""
    title = html.escape(movie.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"))
    original_title = movie.get("original_title", "")
    overview = movie.get("overview", "–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
    release_date = movie.get("release_date", "")
    runtime = movie.get("runtime", 0)
    rating = movie.get("vote_average", 0)
    vote_count = movie.get("vote_count", 0)
    genres = movie.get("genres", [])
    production_countries = movie.get("production_countries", [])
    budget = movie.get("budget", 0)
    revenue = movie.get("revenue", 0)
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    header = f"üé¨ <b>{title}</b>\n"
    
    # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
    if original_title and original_title != movie.get("title", ""):
        header += f"<i>{html.escape(original_title)}</i>\n"
    
    header += "‚îÄ" * 30 + "\n\n"
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    info_lines = []
    
    # –î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞ –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if release_date:
        info_lines.append(f"üìÖ <b>–î–∞—Ç–∞ –≤—ã—Ö–æ–¥–∞:</b> {format_release_date(release_date)}")
    
    if runtime > 0:
        hours = runtime // 60
        minutes = runtime % 60
        duration = f"{hours}—á {minutes}–º" if hours > 0 else f"{minutes}–º"
        info_lines.append(f"‚è± <b>–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:</b> {duration}")
    
    # –†–µ–π—Ç–∏–Ω–≥
    if rating > 0:
        rating_emoji = "‚≠ê" if rating >= 7.0 else "üåü" if rating >= 5.0 else "‚ö™"
        rating_text = f"{rating_emoji} <b>–†–µ–π—Ç–∏–Ω–≥:</b> {rating:.1f}/10"
        if vote_count > 0:
            rating_text += f" ({vote_count:,} –æ—Ü–µ–Ω–æ–∫)"
        info_lines.append(rating_text)
    
    # –ñ–∞–Ω—Ä—ã
    if genres:
        genres_text = ", ".join([g["name"] for g in genres])
        info_lines.append(f"üé≠ <b>–ñ–∞–Ω—Ä—ã:</b> {genres_text}")
    
    # –°—Ç—Ä–∞–Ω—ã –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞
    if production_countries:
        countries = ", ".join([c["name"] for c in production_countries[:3]])
        info_lines.append(f"üåç <b>–°—Ç—Ä–∞–Ω—ã:</b> {countries}")
    
    # –ë—é–¥–∂–µ—Ç –∏ —Å–±–æ—Ä—ã
    if budget > 0:
        info_lines.append(f"üí∞ <b>–ë—é–¥–∂–µ—Ç:</b> ${budget:,}")
    
    if revenue > 0:
        info_lines.append(f"üíµ <b>–°–±–æ—Ä—ã:</b> ${revenue:,}")
    
    # –û–ø–∏—Å–∞–Ω–∏–µ
    description = f"\nüìñ <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{html.escape(overview[:500])}..."
    
    return header + "\n".join(info_lines) + "\n" + description


def format_release_date(date_str: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É —Ä–µ–ª–∏–∑–∞."""
    if not date_str:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    try:
        year, month, day = date_str.split("-")
        months = [
            "—è–Ω–≤–∞—Ä—è", "—Ñ–µ–≤—Ä–∞–ª—è", "–º–∞—Ä—Ç–∞", "–∞–ø—Ä–µ–ª—è", "–º–∞—è", "–∏—é–Ω—è",
            "–∏—é–ª—è", "–∞–≤–≥—É—Å—Ç–∞", "—Å–µ–Ω—Ç—è–±—Ä—è", "–æ–∫—Ç—è–±—Ä—è", "–Ω–æ—è–±—Ä—è", "–¥–µ–∫–∞–±—Ä—è"
        ]
        month_name = months[int(month) - 1]
        return f"{int(day)} {month_name} {year}"
    except:
        return date_str


def format_search_params(params: Dict[str, Any]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è."""
    lines = ["üîç <b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞:</b>"]
    
    if params.get("title"):
        lines.append(f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: {html.escape(params['title'])}")
    
    if params.get("genres"):
        genres_text = ", ".join(params["genres"])
        lines.append(f"üé≠ –ñ–∞–Ω—Ä—ã: {genres_text}")
    
    if params.get("year"):
        lines.append(f"üìÖ –ì–æ–¥: {params['year']}")
    
    if params.get("min_rating"):
        lines.append(f"‚≠ê –ú–∏–Ω. —Ä–µ–π—Ç–∏–Ω–≥: {params['min_rating']}")
    
    if params.get("language"):
        lines.append(f"üåê –Ø–∑—ã–∫: {params['language']}")
    
    if params.get("region"):
        lines.append(f"üåç –†–µ–≥–∏–æ–Ω: {params['region']}")
    
    return "\n".join(lines) + "\n\n"


def format_genre_selection(selected_genres: List[str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∂–∞–Ω—Ä–æ–≤."""
    if not selected_genres:
        return "üé≠ –í—ã–±–µ—Ä–∏—Ç–µ –∂–∞–Ω—Ä—ã –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:"
    
    genres_text = ", ".join(selected_genres)
    return f"üé≠ <b>–í—ã–±—Ä–∞–Ω–Ω—ã–µ –∂–∞–Ω—Ä—ã:</b>\n{genres_text}\n\n–î–æ–±–∞–≤—å—Ç–µ –µ—â–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ì–æ—Ç–æ–≤–æ':"


def format_error_message(error_type: str = "general") -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö."""
    error_messages = {
        "general": "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        "network": "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É.",
        "api": "üîß –ü—Ä–æ–±–ª–µ–º—ã —Å API —Ñ–∏–ª—å–º–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
        "not_found": "üòî –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫—Ä–∏—Ç–µ—Ä–∏–∏ –ø–æ–∏—Å–∫–∞.",
        "invalid_input": "‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
        "timeout": "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
    }
    
    return error_messages.get(error_type, error_messages["general"])


def truncate_text(text: str, max_length: int = 4000) -> str:
    """–û–±—Ä–µ–∑–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –¥–ª—è Telegram."""
    if len(text) <= max_length:
        return text
    
    return text[:max_length - 3] + "..."


def format_help_message() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    return """
üé¨ <b>Movie Search Bot - –°–ø—Ä–∞–≤–∫–∞</b>

<b>üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫:</b>
‚Ä¢ –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é —Ñ–∏–ª—å–º–∞
‚Ä¢ –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –∂–∞–Ω—Ä—É (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
‚Ä¢ –£–∫–∞–∑–∞–Ω–∏–µ –≥–æ–¥–∞ –≤—ã–ø—É—Å–∫–∞

<b>üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫:</b>
‚Ä¢ –í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø—Ä–æ—Å—Ç–æ–≥–æ –ø–æ–∏—Å–∫–∞
‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥
‚Ä¢ –Ø–∑—ã–∫ —Ñ–∏–ª—å–º–∞
‚Ä¢ –†–µ–≥–∏–æ–Ω —Ä–µ–ª–∏–∑–∞
‚Ä¢ –í–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ 18+
‚Ä¢ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤

<b>üìñ –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>
1. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞
2. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (—Å–ª–µ–¥—É–π—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫–∞–º)
3. –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫
4. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ —Ñ–∏–ª—å–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏

<b>üí° –°–æ–≤–µ—Ç—ã:</b>
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å" –¥–ª—è –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
‚Ä¢ –í—ã–±–∏—Ä–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂–∞–Ω—Ä–æ–≤ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
‚Ä¢ –£–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥–æ–¥ –¥–ª—è —Ñ–∏–ª—å–º–æ–≤ —Å –ø–æ–ø—É–ª—è—Ä–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏

<b>‚öôÔ∏è –¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞:</b>
–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ:
1. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /start
2. –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
"""