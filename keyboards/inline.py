from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from typing import List, Dict, Any


def get_main_menu() -> InlineKeyboardMarkup:
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –ø–æ–∏—Å–∫–∞."""
    keyboard = [
        [InlineKeyboardButton(text="üîç –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫", callback_data="simple_search")],
        [InlineKeyboardButton(text="üéØ –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–æ–∏—Å–∫", callback_data="advanced_search")],
        [InlineKeyboardButton(text="‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_skip_button() -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å."""
    keyboard = [
        [InlineKeyboardButton(text="‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data="skip")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_genres_keyboard(genres: Dict[str, int], selected: List[int] = None) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∂–∞–Ω—Ä–æ–≤."""
    if selected is None:
        selected = []
    
    keyboard = []
    row = []
    
    # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã –≤ –Ω–∞—á–∞–ª–µ
    popular_genres = [
        "–±–æ–µ–≤–∏–∫", "–∫–æ–º–µ–¥–∏—è", "–¥—Ä–∞–º–∞", "—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞", "—Ç—Ä–∏–ª–ª–µ—Ä", 
        "—É–∂–∞—Å—ã", "—Ä–æ–º–∞–Ω—Ç–∏–∫–∞", "–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è", "–∫—Ä–∏–º–∏–Ω–∞–ª", "–¥–µ—Ç–µ–∫—Ç–∏–≤"
    ]
    
    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ –∂–∞–Ω—Ä—ã
    for genre_name in popular_genres:
        if genre_name in genres:
            genre_id = genres[genre_name]
            text = f"‚úÖ {genre_name.title()}" if genre_id in selected else genre_name.title()
            row.append(InlineKeyboardButton(
                text=text, 
                callback_data=f"genre_{genre_id}"
            ))
            
            if len(row) == 2:
                keyboard.append(row)
                row = []
    
    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∂–∞–Ω—Ä—ã
    remaining_genres = {k: v for k, v in genres.items() if k not in popular_genres}
    for genre_name, genre_id in sorted(remaining_genres.items()):
        text = f"‚úÖ {genre_name.title()}" if genre_id in selected else genre_name.title()
        row.append(InlineKeyboardButton(
            text=text, 
            callback_data=f"genre_{genre_id}"
        ))
        
        if len(row) == 2:
            keyboard.append(row)
            row = []
    
    if row:
        keyboard.append(row)
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    control_buttons = []
    if selected:
        control_buttons.append(InlineKeyboardButton(
            text="üóë –û—á–∏—Å—Ç–∏—Ç—å", 
            callback_data="clear_genres"
        ))
    
    control_buttons.append(InlineKeyboardButton(
        text="‚úÖ –ì–æ—Ç–æ–≤–æ", 
        callback_data="genres_done"
    ))
    
    keyboard.append(control_buttons)
    keyboard.append([InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_pagination_keyboard(current_page: int, total_pages: int, prefix: str = "page") -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏."""
    keyboard = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    nav_row = []
    if current_page > 1:
        nav_row.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"{prefix}_{current_page - 1}"))
    
    nav_row.append(InlineKeyboardButton(
        text=f"{current_page}/{total_pages}", 
        callback_data="current_page"
    ))
    
    if current_page < total_pages:
        nav_row.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"{prefix}_{current_page + 1}"))
    
    keyboard.append(nav_row)
    
    # –ë—ã—Å—Ç—Ä—ã–µ –ø–µ—Ä–µ—Ö–æ–¥—ã
    if total_pages > 3:
        quick_nav = []
        if current_page > 3:
            quick_nav.append(InlineKeyboardButton(text="1", callback_data=f"{prefix}_1"))
        if current_page < total_pages - 2:
            quick_nav.append(InlineKeyboardButton(text=str(total_pages), callback_data=f"{prefix}_{total_pages}"))
        
        if quick_nav:
            keyboard.append(quick_nav)
    
    # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
    keyboard.append([
        InlineKeyboardButton(text="üîÑ –ù–æ–≤—ã–π –ø–æ–∏—Å–∫", callback_data="new_search"),
        InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    ])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_movie_details_keyboard(movie_id: int) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ."""
    keyboard = [
        [InlineKeyboardButton(text="üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{movie_id}")],
        [InlineKeyboardButton(text="üîô –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º", callback_data="back_to_results")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_yes_no_keyboard(yes_callback: str, no_callback: str) -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –î–∞/–ù–µ—Ç."""
    keyboard = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=yes_callback),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=no_callback)
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)


def get_sort_options_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏."""
    keyboard = [
        [InlineKeyboardButton(text="üî• –ü–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ—Å—Ç–∏", callback_data="sort_popularity.desc")],
        [InlineKeyboardButton(text="‚≠ê –ü–æ —Ä–µ–π—Ç–∏–Ω–≥—É", callback_data="sort_vote_average.desc")],
        [InlineKeyboardButton(text="üìÖ –ü–æ –¥–∞—Ç–µ –≤—ã—Ö–æ–¥–∞", callback_data="sort_primary_release_date.desc")],
        [InlineKeyboardButton(text="üî§ –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data="sort_original_title.asc")],
        [InlineKeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="sort_done")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)